generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filteredRelationCount"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_PRODUCTION")
}

model circuits {
  circuitId  Int     @id
  circuitRef String  @default("") @db.VarChar(255)
  name       String  @default("") @db.VarChar(255)
  location   String? @db.VarChar(255)
  country    String? @db.VarChar(255)
  lat        Float?
  lng        Float?
  alt        Int?
  url        String  @unique @default("") @db.VarChar(255)
  races      races[]
}

model constructorResults {
  constructorResultsId Int          @id
  raceId               Int          @default(0)
  constructorId        Int          @default(0)
  points               Float?
  status               String?      @db.VarChar(255)
  constructors         constructors @relation(fields: [constructorId], references: [constructorId], onDelete: NoAction, onUpdate: NoAction, map: "fk_constructor_id")
  races                races        @relation(fields: [raceId], references: [raceId], onDelete: NoAction, onUpdate: NoAction, map: "fk_raceid")
}

model constructorStandings {
  constructorStandingsId Int          @id
  raceId                 Int          @default(0)
  constructorId          Int          @default(0)
  points                 Float        @default(0)
  position               Int?
  positionText           String?      @db.VarChar(255)
  wins                   Int          @default(0)
  constructors           constructors @relation(fields: [constructorId], references: [constructorId], onDelete: NoAction, onUpdate: NoAction, map: "fk_constructor_id")
  races                  races        @relation(fields: [raceId], references: [raceId], onDelete: NoAction, onUpdate: NoAction, map: "fk_raceid")
}

model constructors {
  constructorId        Int                    @id
  constructorRef       String                 @default("") @db.VarChar(255)
  name                 String                 @unique @default("") @db.VarChar(255)
  nationality          String?                @db.VarChar(255)
  url                  String                 @default("") @db.VarChar(255)
  constructorResults   constructorResults[]
  constructorStandings constructorStandings[]
  qualifying           qualifying[]
  results              results[]
  sprintResults        sprintResults[]
}

model driverStandings {
  driverStandingsId Int     @id
  raceId            Int     @default(0)
  driverId          Int     @default(0)
  points            Float   @default(0)
  position          Int?
  positionText      String? @db.VarChar(255)
  wins              Int     @default(0)
  drivers           drivers @relation(fields: [driverId], references: [driverId], onDelete: NoAction, onUpdate: NoAction, map: "fk_driverid")
  races             races   @relation(fields: [raceId], references: [raceId], onDelete: NoAction, onUpdate: NoAction, map: "fk_raceid")
}

model drivers {
  driverId        Int               @id
  driverRef       String            @default("") @db.VarChar(255)
  number          Int?
  code            String?           @db.VarChar(3)
  forename        String            @default("") @db.VarChar(255)
  surname         String            @default("") @db.VarChar(255)
  dob             DateTime?         @db.Date
  nationality     String?           @db.VarChar(255)
  url             String            @default("") @db.VarChar(255)
  driverStandings driverStandings[]
  lapTimes        lapTimes[]
  pitStops        pitStops[]
  qualifying      qualifying[]
  results         results[]
  sprintResults   sprintResults[]
}

model lapTimes {
  raceId       Int
  driverId     Int
  lap          Int
  position     Int?
  time         String? @db.VarChar(255)
  milliseconds Int?
  drivers      drivers @relation(fields: [driverId], references: [driverId], onDelete: NoAction, onUpdate: NoAction, map: "fk_driverid")
  races        races   @relation(fields: [raceId], references: [raceId], onDelete: NoAction, onUpdate: NoAction, map: "fk_raceid")

  @@id([raceId, driverId, lap])
}

model pitStops {
  raceId       Int
  driverId     Int
  stop         Int
  lap          Int
  time         DateTime @db.Time(0)
  duration     String?  @db.VarChar(255)
  milliseconds Int?
  drivers      drivers  @relation(fields: [driverId], references: [driverId], onDelete: NoAction, onUpdate: NoAction, map: "fk_driverid")
  races        races    @relation(fields: [raceId], references: [raceId], onDelete: NoAction, onUpdate: NoAction, map: "fk_raceid")

  @@id([raceId, driverId, stop])
  @@index([raceId], map: "raceId")
}

model qualifying {
  qualifyId     Int          @id
  raceId        Int          @default(0)
  driverId      Int          @default(0)
  constructorId Int          @default(0)
  number        Int          @default(0)
  position      Int?
  q1            String?      @db.VarChar(255)
  q2            String?      @db.VarChar(255)
  q3            String?      @db.VarChar(255)
  constructors  constructors @relation(fields: [constructorId], references: [constructorId], onDelete: NoAction, onUpdate: NoAction, map: "fk_constructorid")
  drivers       drivers      @relation(fields: [driverId], references: [driverId], onDelete: NoAction, onUpdate: NoAction, map: "fk_driverid")
  races         races        @relation(fields: [raceId], references: [raceId], onDelete: NoAction, onUpdate: NoAction, map: "fk_raceid")
}

model races {
  raceId               Int                    @id
  year                 Int                    @default(0)
  round                Int                    @default(0)
  circuitId            Int                    @default(0)
  name                 String                 @default("") @db.VarChar(255)
  date                 DateTime               @default(dbgenerated("CURRENT_DATE")) @db.Date
  time                 DateTime?              @db.Time(0)
  url                  String?                @unique @db.VarChar(255)
  fp1_date             DateTime?              @db.Date
  fp1_time             DateTime?              @db.Time(0)
  fp2_date             DateTime?              @db.Date
  fp2_time             DateTime?              @db.Time(0)
  fp3_date             DateTime?              @db.Date
  fp3_time             DateTime?              @db.Time(0)
  quali_date           DateTime?              @db.Date
  quali_time           DateTime?              @db.Time(0)
  sprint_date          DateTime?              @db.Date
  sprint_time          DateTime?              @db.Time(0)
  constructorResults   constructorResults[]
  constructorStandings constructorStandings[]
  driverStandings      driverStandings[]
  lapTimes             lapTimes[]
  pitStops             pitStops[]
  qualifying           qualifying[]
  circuits             circuits               @relation(fields: [circuitId], references: [circuitId], onDelete: NoAction, onUpdate: NoAction, map: "fk_circuitid")
  results              results[]
  sprintResults        sprintResults[]
}

model results {
  resultId        Int          @id
  raceId          Int          @default(0)
  driverId        Int          @default(0)
  constructorId   Int          @default(0)
  number          Int?
  grid            Int          @default(0)
  position        Int?
  positionText    String       @default("") @db.VarChar(255)
  positionOrder   Int          @default(0)
  points          Float        @default(0)
  laps            Int          @default(0)
  time            String?      @db.VarChar(255)
  milliseconds    Int?
  fastestLap      Int?
  rank            Int?         @default(0)
  fastestLapTime  String?      @db.VarChar(255)
  fastestLapSpeed String?      @db.VarChar(255)
  statusId        Int          @default(0)
  constructors    constructors @relation(fields: [constructorId], references: [constructorId], onDelete: NoAction, onUpdate: NoAction, map: "fk_constructorid")
  drivers         drivers      @relation(fields: [driverId], references: [driverId], onDelete: NoAction, onUpdate: NoAction, map: "fk_driverid")
  races           races        @relation(fields: [raceId], references: [raceId], onDelete: NoAction, onUpdate: NoAction, map: "fk_raceid")
  status          status       @relation(fields: [statusId], references: [statusId], onDelete: NoAction, onUpdate: NoAction, map: "fk_statusid")
}

model seasons {
  year Int    @id @default(0)
  url  String @unique @default("") @db.VarChar(255)
}

model sprintResults {
  sprintResultId Int          @id
  raceId         Int          @default(0)
  driverId       Int          @default(0)
  constructorId  Int          @default(0)
  number         Int          @default(0)
  grid           Int          @default(0)
  position       Int?
  positionText   String       @default("") @db.VarChar(255)
  positionOrder  Int          @default(0)
  points         Float        @default(0)
  laps           Int          @default(0)
  time           String?      @db.VarChar(255)
  milliseconds   Int?
  fastestLap     Int?
  fastestLapTime String?      @db.VarChar(255)
  statusId       Int          @default(0)
  constructors   constructors @relation(fields: [constructorId], references: [constructorId], onDelete: NoAction, onUpdate: NoAction, map: "fk_constructorid")
  drivers        drivers      @relation(fields: [driverId], references: [driverId], onDelete: NoAction, onUpdate: NoAction, map: "fk_driverid")
  races          races        @relation(fields: [raceId], references: [raceId], onDelete: NoAction, onUpdate: NoAction, map: "fk_raceid")
  status         status       @relation(fields: [statusId], references: [statusId], onDelete: NoAction, onUpdate: NoAction, map: "fk_statusid")
}

model status {
  statusId      Int             @id
  status        String          @default("") @db.VarChar(255)
  results       results[]
  sprintResults sprintResults[]
}
